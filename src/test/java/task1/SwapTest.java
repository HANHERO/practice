package task1;

import org.junit.Test;

import java.util.Arrays;

import static org.junit.Assert.assertEquals;

public class SwapTest {

    @Test
    public void startScenarios(){
        final int min = Integer.MIN_VALUE;
        final int max = Integer.MAX_VALUE;
        ////////////////////////////////1. Граничные значения области определения
        test(min, min);
        test(max, max);
        test(max, min);
        test(min, max);
        test(0, min);
        test(0, max);
        test(max, 0);
        test(min, 0);
        test(1, min);
        test(1, max);
        test(max, 1);
        test(min, 1);
        test(-1, min);
        test(-1, max);
        test(max, -1);
        test(min, -1);
        test(2, min);
        test(2, max);
        test(max, 2);
        test(min, 2);
        test(-2, min);
        test(-2, max);
        test(max, -2);
        test(min, -2);
        test(min, min+1);
        test(max, max-1);
        test(max, min+1);
        test(min, max-1);
        test(min+1, min);
        test(max-1, max);
        test(min+1, max);
        test(max-1, min);
        ////////////////////////////////2. Классы эквивалентности
        ////////////////////////////////2.1 Границы классов эквивалентности
        test(min, min);
        test(min, -1);
        test(-1, min);
        test(min, min+1);
        test(min+1, min);
        test(-2, min);
        test(-1, min+1);
        test(min+1, -1);
        test(min, -2);
        test(min/2, -1);
        test(-1, min/2);
        test(min/2, min);
        test(min, min/2);
        test(min/2+1, -1);
        test(-1, min/2+1);
        test(min/2+1, min);
        test(min, min/2+1);
        test(min/2-1, -1);
        test(-1, min/2-1);
        test(min/2-1, min);
        test(min, min/2-1);
        test(min, -15487474);
        test(-2658741, min);
        test(-1, -23655987);
        test(-15584462, -1);
        test(-256548845, -1);
        test(-2, -1);
        test(-1, -2);
        test(-1, -1);

        test(max, max);
        test(max, 1);
        test(1, max);
        test(max, max-1);
        test(max-1, max);
        test(2, max);
        test(1, max-1);
        test(max-1, 1);
        test(max, 2);
        test(max/2, 1);
        test(1, max/2);
        test(max/2, max);
        test(max, max/2);
        test(max/2+1, 1);
        test(1, max/2+1);
        test(max/2+1, max);
        test(max, max/2+1);
        test(max/2-1, 1);
        test(1, max/2-1);
        test(max/2-1, max);
        test(max, max/2-1);
        test(max, 15487474);
        test(2658741, max);
        test(1, 23655987);
        test(15584462, 1);
        test(256548845, 1);
        test(2, 1);
        test(1, 2);
        test(1, 1);

        test(max, min);
        test(max, 0);
        test(0, min);
        test(max, min+1);
        test(max-1, min);
        test(1, min);
        test(0, min+1);
        test(max-1, 0);
        test(max, 1);
        test(max/2, 0);
        test(0, min/2);
        test(max/2, min);
        test(max, min/2);
        test(max/2+1, 0);
        test(0, min/2+1);
        test(max/2+1, min);
        test(max, min/2+1);
        test(max/2-1, 0);
        test(0, min/2-1);
        test(max/2-1, min);
        test(max, min/2-1);
        test(max, -1548747);
        test(2658741, min);
        test(0, -236587);
        test(15584462, 0);
        test(2568845, 0);
        test(1, 0);
        test(0, -1);
        test(0, 0);

        test(min, max);
        test(min, 0);
        test(0, max);
        test(min, max-1);
        test(min+1, max);
        test(-1, max);
        test(0, max-1);
        test(min+1, 0);
        test(min, -1);
        test(min/2, 0);
        test(0, max/2);
        test(min/2, max);
        test(min, max/2);
        test(min/2+1, 0);
        test(0, max/2+1);
        test(min/2+1, max);
        test(min, max/2+1);
        test(min/2-1, 0);
        test(0, max/2-1);
        test(min/2-1, max);
        test(min, max/2-1);
        test(min, 15487474);
        test(-2658741, max);
        test(0, 23655987);
        test(-15584462, 0);
        test(-256548845, 0);
        test(-1, 0);
        test(0, 1);
        test(0, 0);
        ////////////////////////////////2.2 Впритык справа и слева от границы
        test(min, min+1);
        test(min+1, min);
        test(min+1, min+1);
        test(min, -2);
        test(min+1, -2);
        test(min+1, -1);
        test(min, 0);
        test(min+1, 0);
        test(-2, min);
        test(-2, min+1);
        test(-1, min+1);
        test(0, min+1);
        test(0, min);
        test(min, min+2);
        test(min+1, min+2);
        test(min+1, min);
        test(min+2, min+1);
        test(-3, min);
        test(-3, min+1);
        test(-1, min+1);
        test(-1, min+2);
        test(-2, min+2);
        test(0, min+2);
        test(min+2, -1);
        test(min+2, -2);
        test(min+2, 0);
        test(min, -2);
        test(min, -3);
        test(min+1, -3);
        test(min/2+1, -1);
        test(min/2-1, -1);
        test(min/2+1, 0);
        test(min/2-1, 0);
        test(min/2+1, -2);
        test(min/2-1, -2);
        test(min/2, 0);
        test(min/2, -2);
        test(-2, min/2);
        test(-0, min/2);
        test(-1, min/2-1);
        test(-1, min/2+1);
        test(-2, min/2-1);
        test(-2, min/2+1);
        test(-0, min/2-1);
        test(-0, min/2+1);
        test(min/2+1, min);
        test(min/2-1, min);
        test(min/2, min+1);
        test(min/2+1, min+1);
        test(min/2-1, min+1);
        test(min, min/2+1);
        test(min, min/2-1);
        test(min+1, min/2);
        test(min+1, min/2+1);
        test(min+1, min/2-1);
        test(min/2+2, -1);
        test(min/2, -1);
        test(min/2+2, 0);
        test(min/2, 0);
        test(min/2+2, -2);
        test(min/2, -2);
        test(-1, min/2+1);
        test(-1, min/2);
        test(-1, min/2+2);
        test(0, min/2+1);
        test(0, min/2);
        test(0, min/2+2);
        test(-2, min/2+1);
        test(-2, min/2);
        test(-2, min/2+2);
        test(min/2+1, min+1);
        test(min/2+1, min);
        test(min/2+2, min+1);
        test(min/2+2, min);
        test(min/2, min+1);
        test(min/2, min);
        test(min, min/2+2);
        test(min+1, min/2);
        test(min, min/2+3);
        test(min+1, min/2+2);
        test(min, min/2);
        test(min+1, min/2+3);
        test(min/2-1, -1);
        test(min/2, -1);
        test(min/2-2, -1);
        test(min/2, 0);
        test(min/2-1, 0);
        test(min/2-2, 0);
        test(min/2, -2);
        test(min/2-1, -2);
        test(min/2-2, -2);
        test(-1, min/2);
        test(-1, min/2-2);
        test(0, min/2);
        test(0, min/2-1);
        test(0, min/2-2);
        test(-2, min/2);
        test(-2, min/2-1);
        test(-2, min/2-2);
        test(min/2, min);
        test(min/2-2, min);
        test(min/2, min+1);
        test(min/2-1, min+1);
        test(min/2-2, min+1);
        test(min, min/2);
        test(min, min/2-2);
        test(min+1, min/2);
        test(min+1, min/2-1);
        test(min+1, min/2-2);
        test(min, -15487473);
        test(min, -15487475);
        test(min+1, -15487473);
        test(min+1, -15487474);
        test(min+1, -15487475);
        test(-2658740, min);
        test(-2658742, min);
        test(-2658740, min+1);
        test(-2658741, min+1);
        test(-2658742, min+1);
        test(0, -23655986);
        test(0, -23655987);
        test(0, -23655988);
        test(-1, -23655986);
        test(-1, -23655988);
        test(-2, -23655986);
        test(-2, -23655987);
        test(-2, -23655988);
        test(-15584461, 0);
        test(-15584462, 0);
        test(-15584463, 0);
        test(-15584461, -1);
        test(-15584463, -1);
        test(-15584461, -2);
        test(-15584462, -2);
        test(-15584463, -2);
        test(-256548844, 0);
        test(-256548845, 0);
        test(-256548846, 0);
        test(-256548844, -1);
        test(-256548846, -1);
        test(-256548844, -2);
        test(-256548845, -2);
        test(-256548846, -2);
        test(-2, -2);
        test(-1, -2);
        test(-2, -1);
        test(0, 0);
        test(0, -1);
        test(-1, 0);
        test(0, -2);
        test(-2, 0);
        test(-3, 0);
        test(0, -3);
        test(-2, -3);
        test(-3, -2);
        test(-1, -3);
        test(-3, -1);

        test(max, max-1);
        test(max-1, max);
        test(max-1, max-1);
        test(max, 2);
        test(max-1, 2);
        test(max-1, 1);
        test(max, 0);
        test(max-1, 0);
        test(2, max);
        test(2, max-1);
        test(1, max-1);
        test(0, max-1);
        test(0, max);
        test(max, max-2);
        test(max-1, max-2);
        test(max-1, max);
        test(max-2, max-1);
        test(3, max);
        test(3, max-1);
        test(1, max-1);
        test(1, max-2);
        test(2, max-2);
        test(0, max-2);
        test(max-2, 1);
        test(max-2, 2);
        test(max-2, 0);
        test(max, 2);
        test(max, 3);
        test(max-1, 3);
        test(max/2+1, 1);
        test(max/2-1, 1);
        test(max/2+1, 0);
        test(max/2-1, 0);
        test(max/2+1, 2);
        test(max/2-1, 2);
        test(max/2, 0);
        test(max/2, -2);
        test(2, max/2);
        test(0, max/2);
        test(1, max/2-1);
        test(1, max/2+1);
        test(2, max/2-1);
        test(2, max/2+1);
        test(0, max/2-1);
        test(0, max/2+1);
        test(max/2+1, max);
        test(max/2-1, max);
        test(max/2, max-1);
        test(max/2+1, max-1);
        test(max/2-1, max-1);
        test(max, max/2+1);
        test(max, max/2-1);
        test(max-1, max/2);
        test(max-1, max/2+1);
        test(max-1, max/2-1);
        test(max/2+2, -1);
        test(max/2, -1);
        test(max/2+2, 0);
        test(max/2, 0);
        test(max/2+2, -2);
        test(max/2, -2);
        test(1, max/2+1);
        test(1, max/2);
        test(1, max/2+2);
        test(0, max/2+1);
        test(0, max/2);
        test(0, max/2+2);
        test(2, max/2+1);
        test(2, max/2);
        test(2, max/2+2);
        test(max/2+1, max-1);
        test(max/2+1, max);
        test(max/2+2, max-1);
        test(max/2+2, max);
        test(max/2, max-1);
        test(max/2, max);
        test(max, max/2+2);
        test(max-1, max/2);
        test(max, max/2+3);
        test(max-1, max/2+2);
        test(max, max/2);
        test(max-1, max/2+3);
        test(max/2-1, 1);
        test(max/2, 1);
        test(max/2-2, 1);
        test(max/2, 0);
        test(max/2-1, 0);
        test(max/2-2, 0);
        test(max/2, 2);
        test(max/2-1, 2);
        test(max/2-2, 2);
        test(1, max/2);
        test(1, max/2-2);
        test(0, max/2);
        test(0, max/2-1);
        test(0, max/2-2);
        test(2, max/2);
        test(2, max/2-1);
        test(2, max/2-2);
        test(max/2, max);
        test(max/2-2, max);
        test(max/2, max-1);
        test(max/2-1, max-1);
        test(max/2-2, max-1);
        test(max, max/2);
        test(max, max/2-2);
        test(max-1, max/2);
        test(max-1, max/2-1);
        test(max-1, max/2-2);
        test(max, 15487473);
        test(max, 15487475);
        test(max-1, 15487473);
        test(max-1, 15487474);
        test(max-1, 15487475);
        test(2658740, max);
        test(2658742, max);
        test(2658740, max-1);
        test(2658741, max-1);
        test(2658742, max-1);
        test(0, 23655986);
        test(0, 23655987);
        test(0, 23655988);
        test(1, 23655986);
        test(1, 23655988);
        test(2, 23655986);
        test(2, 23655987);
        test(2, 23655988);
        test(15584461, 0);
        test(15584462, 0);
        test(15584463, 0);
        test(15584461, 1);
        test(15584463, 1);
        test(15584461, 2);
        test(15584462, 2);
        test(15584463, 2);
        test(256548844, 0);
        test(256548845, 0);
        test(256548846, 0);
        test(256548844, 1);
        test(256548846, 1);
        test(256548844, 2);
        test(256548845, 2);
        test(256548846, 2);
        test(2, 2);
        test(1, 2);
        test(2, 1);
        test(0, 0);
        test(0, 1);
        test(1, 0);
        test(0, 2);
        test(2, 0);
        test(3, 0);
        test(0, 3);
        test(2, 3);
        test(3, 2);
        test(1, 3);
        test(3, 1);

        test(max, min+1);
        test(max-1, min);
        test(max-1, min+1);
        test(max, 2);
        test(max-1, -1);
        test(max-1, 0);
        test(max, 0);
        test(max-1, -1);
        test(2, min);
        test(2, min+1);
        test(1, min+1);
        test(0, min+1);
        test(0, min);
        test(max, min+2);
        test(max-1, min+2);
        test(max-1, min);
        test(max-2, min+1);
        test(3, min);
        test(3, min+1);
        test(1, min+1);
        test(1, min+2);
        test(2, min+2);
        test(0, min+2);
        test(max-2, 0);
        test(max-2, -1);
        test(max-2, 1);
        test(max, -1);
        test(max, -2);
        test(max-1, 3-2);
        test(max/2+1, 0);
        test(max/2-1, 0);
        test(max/2+1, 1);
        test(max/2-1, 1);
        test(max/2+1, -1);
        test(max/2-1, -1);
        test(max/2, 1);
        test(max/2, -1);
        test(2, min/2);
        test(0, min/2);
        test(1, min/2-1);
        test(1, min/2+1);
        test(2, min/2-1);
        test(2, min/2+1);
        test(0, min/2-1);
        test(0, min/2+1);
        test(max/2+1, min);
        test(max/2-1, min);
        test(max/2, min+1);
        test(max/2+1, min+1);
        test(max/2-1, min+1);
        test(max, min/2+1);
        test(max, min/2-1);
        test(max-1, min/2);
        test(max-1, min/2+1);
        test(max-1, min/2-1);
        test(max/2+2, 0);
        test(max/2, 0);
        test(max/2+2, 1);
        test(max/2, 1);
        test(max/2+2, -1);
        test(max/2, -1);
        test(1, min/2+1);
        test(1, min/2);
        test(1, min/2+2);
        test(0, min/2+1);
        test(0, min/2);
        test(0, min/2+2);
        test(2, min/2+1);
        test(2, min/2);
        test(2, min/2+2);
        test(max/2+1, min+1);
        test(max/2+1, min);
        test(max/2+2, min+1);
        test(max/2+2, min);
        test(max/2, min+1);
        test(max/2, min);
        test(max, min/2+2);
        test(max-1, min/2);
        test(max, min/2+3);
        test(max-1, min/2+2);
        test(max, min/2);
        test(max-1, min/2+3);
        test(max/2-1, -1);
        test(max/2, -1);
        test(max/2-2, -1);
        test(max/2, 0);
        test(max/2-1, 0);
        test(max/2-2, 0);
        test(max/2, -2);
        test(max/2-1, -2);
        test(max/2-2, -2);
        test(1, min/2);
        test(1, min/2-2);
        test(0, min/2);
        test(0, min/2-1);
        test(0, min/2-2);
        test(2, min/2);
        test(2, min/2-1);
        test(2, min/2-2);
        test(max/2, min);
        test(max/2-2, min);
        test(max/2, min+1);
        test(max/2-1, min+1);
        test(max/2-2, min+1);
        test(max, min/2);
        test(max, min/2-2);
        test(max-1, min/2);
        test(max-1, min/2-1);
        test(max-1, min/2-2);
        test(max, -15487473);
        test(max, -5487475);
        test(max-1, -15487473);
        test(max-1, -15487474);
        test(max-1, -15487475);
        test(2658740, min);
        test(2658742, min);
        test(2658740, min+1);
        test(2658741, min+1);
        test(2658742, min+1);
        test(0, -23655986);
        test(0, -23655987);
        test(0, -23655988);
        test(1, -23655986);
        test(1, -23655988);
        test(2, -23655986);
        test(2, -23655987);
        test(2, -23655988);
        test(15584461, 0);
        test(15584462, 0);
        test(15584463, 0);
        test(15584461, -1);
        test(15584463, -1);
        test(15584461, -2);
        test(15584462, -2);
        test(15584463, -2);
        test(256548844, 0);
        test(256548845, 0);
        test(256548846, 0);
        test(256548844, -1);
        test(256548846, -1);
        test(256548844, -2);
        test(256548845, -2);
        test(256548846, -2);
        test(2, -2);
        test(1, -2);
        test(2, -1);
        test(0, 0);
        test(0, -1);
        test(1, 0);
        test(0, -2);
        test(2, 0);
        test(3, 0);
        test(0, -3);
        test(2, -3);
        test(3, -2);
        test(1, -3);
        test(3, -1);

        test(min, max-1);
        test(min+1, max);
        test(min+1, max-1);
        test(min, 2);
        test(min+1, 1);
        test(min+1, 0);
        test(min, 0);
        test(min+1, 1);
        test(-2, max);
        test(-2, max-1);
        test(-1, max-1);
        test(0, max-1);
        test(0, max);
        test(min, max-2);
        test(min+1, max-2);
        test(min+1, max);
        test(min+2, max-1);
        test(-3, max);
        test(-3, max-1);
        test(-1, max-1);
        test(-1, max-2);
        test(-2, max-2);
        test(0, max-2);
        test(min+2, 0);
        test(min+2, 1);
        test(min+2, 1);
        test(min, -1);
        test(min, -2);
        test(min+1, 3-2);
        test(min/2+1, 0);
        test(min/2-1, 0);
        test(min/2+1, 1);
        test(min/2-1, 1);
        test(min/2+1, 1);
        test(min/2-1, 1);
        test(min/2, 1);
        test(min/2, 1);
        test(-2, max/2);
        test(0, max/2);
        test(-1, max/2-1);
        test(-1, max/2+1);
        test(-2, max/2-1);
        test(-2, max/2+1);
        test(0, max/2-1);
        test(0, max/2+1);
        test(min/2+1, max);
        test(min/2-1, max);
        test(min/2, max-1);
        test(min/2+1, max-1);
        test(min/2-1, max-1);
        test(min, max/2+1);
        test(min, max/2-1);
        test(min+1, max/2);
        test(min+1, max/2+1);
        test(min+1, max/2-1);
        test(min/2+2, 0);
        test(min/2, 0);
        test(min/2+2, 1);
        test(min/2, 1);
        test(min/2+2, 1);
        test(min/2, 1);
        test(-1, max/2+1);
        test(-1, max/2);
        test(-1, max/2+2);
        test(0, max/2+1);
        test(0, max/2);
        test(0, max/2+2);
        test(-2, max/2+1);
        test(-2, max/2);
        test(-2, max/2+2);
        test(min/2+1, max-1);
        test(min/2+1, max);
        test(min/2+2, max-1);
        test(min/2+2, max);
        test(min/2, max-1);
        test(min/2, max);
        test(min, max/2+2);
        test(min+1, max/2);
        test(min, max/2+3);
        test(min+1, max/2+2);
        test(min, max/2);
        test(min+1, max/2+3);
        test(min/2-1, 1);
        test(min/2, 1);
        test(min/2-2, 1);
        test(min/2, 0);
        test(min/2-1, 0);
        test(min/2-2, 0);
        test(min/2, 2);
        test(min/2-1, 2);
        test(min/2-2, 2);
        test(-1, max/2);
        test(-1, max/2-2);
        test(0, max/2);
        test(0, max/2-1);
        test(0, max/2-2);
        test(-2, max/2);
        test(-2, max/2-1);
        test(-2, max/2-2);
        test(min/2, max);
        test(min/2-2, max);
        test(min/2, max-1);
        test(min/2-1, max-1);
        test(min/2-2, max-1);
        test(min, max/2);
        test(min, max/2-2);
        test(min+1, max/2);
        test(min+1, max/2-1);
        test(min+1, max/2-2);
        test(min, 15487473);
        test(min, 5487475);
        test(min+1, 15487473);
        test(min+1, 15487474);
        test(min+1, 15487475);
        test(-2658740, max);
        test(-2658742, max);
        test(-2658740, max-1);
        test(-2658741, max-1);
        test(-2658742, max-1);
        test(0, 23655986);
        test(0, 23655987);
        test(0, 23655988);
        test(-1, 23655986);
        test(-1, 23655988);
        test(-2, 23655986);
        test(-2, 23655987);
        test(-2, 23655988);
        test(-15584461, 0);
        test(-15584462, 0);
        test(-15584463, 0);
        test(-15584461, 1);
        test(-15584463, 1);
        test(-15584461, 2);
        test(-15584462, 2);
        test(-15584463, 2);
        test(-256548844, 0);
        test(-256548845, 0);
        test(-256548846, 0);
        test(-256548844, 1);
        test(-256548846, 1);
        test(-256548844, 2);
        test(-256548845, 2);
        test(-256548846, 2);
        test(-2, 2);
        test(-1, 2);
        test(-2, 1);
        test(0, 0);
        test(0, 1);
        test(-1, 0);
        test(0, 2);
        test(-2, 0);
        test(-3, 0);
        test(0, 3);
        test(-2, 3);
        test(-3, 2);
        test(-1, 3);
        test(-3, 1);
        ////////////////////////////////2.3 Внутри класса эквивалентности
        test(-100, -150);
        test(-93684603, -1981884874);
        test(-940817048, -539242973);
        test(-134019904, -791108626);
        test(-2126287789, -1290447675);
        test(-1104472712, -1320391674);
        test(-1084256922, -2091816424);
        test(-2108001011, -1397531227);
        test(-1468097411, -703734500);
        test(-1894374300, -768268282);
        test(-810176145, -751602437);
        test(-703211673, -1435365802);
        test(-1786187087, -1693551355);
        test(-1082888366, -1349342142);
        test(74931961, -1878887850);
        test(-614603785, -1256484761);
        test(-2029653922, -216161937);
        test(-1603622810, -1807178048);
        test(-1270116021, -1311386869);
        test(-703412152, -965955449);
        test(-1879764656, -236931133);
        test(-2147271381, -1706647352);
        test(-1396221548, -425771015);
        test(-224991459, -791209419);
        test(-107030134, -832056872);
        test(-311350320, -56971370);
        test(-1166899995, -1511127192);
        test(-1724596527, -878162008);
        test(-2029432719, -1501508888);
        test(-965837024, -783558175);
        test(-1812935073, -94422054);
        test(-417627930, -2021078820);
        test(-404653104, -1824616751);
        test(-1634628821, -319612112);
        test(-1394302627, -1662791971);
        test(-435947272, -1225743347);
        test(-503819120, -807884226);
        test(-2147008306, -2036334255);
        test(-1256484761, -1256484761);
        test(-1554486452, -746376377);
        test(1910931082, 1875016105);
        test(1124737509, 391345129);
        test(2056074306, 1290965297);
        test(1294349577, 872414731);
        test(1039715947, 1166800503);
        test(1536046399, 2032835586);
        test(849080173, 1599954428);
        test(471310951, 502507489);
        test(342347018, 214094619);
        test(1202706622, 1521871123);
        test(1935215361, 1926145944);
        test(1926145944, 1279727397);
        test(1942615834, 849565720);
        test(360954179, 1204480781);
        test(20071632, 1935838274);
        test(324879810, 1851226616);
        test(2142396677, 916326991);
        test(1330989063, 1970599553);
        test(1335132139, 1275675374);
        test(1727637706, 614013213);
        test(565988777, 788556699);
        test(1870641753, 16316056);
        test(931560624, 1730497696);
        test(1830346106, 1894932724);
        test(1425454994, 360111972);
        test(705131691, 1780088918);
        test(1743206479, 275338940);
        test(2113487379, 680705931);
        test(2119680334, 1896604232);
        test(29332511, 1451061587);
        test(1917551946, 106168646);
        test(104583910, 1736427469);
        test(1061290428, 345817995);
        test(1516048367, 1504497198);
        test(402896441, 1199820556);
        test(2062283849, 959403273);
        test(740652000, 1686992866);
        test(1413995065, 1818813880);
        test(173659750, 1775898143);
        test(1566374781, 1407025614);
        test(276738995, -454764588);
        test(863462099, -1245112450);
        test(1419606485, -223569897);
        test(459714794, -994286789);
        test(667796998, -1044924477);
        test(1647010381, -1663532788);
        test(835113102, -358276394);
        test(1091508203, -94652740);
        test(226724583, -1048250358);
        test(22323238, -3234244);
        test(388690246, -121204531);
        test(83808045, -103920174);
        test(1514404581, -745651550);
        test(1059826940, -460649435);
        test(789361874, -707695389);
        test(1813522906, -737511038);
        test(140964842, -1392716832);
        test(2001189098, -178927525);
        test(48878419, -1562228289);
        test(820182783, -1293960485);
        test(1739477679, -11384828);
        test(23073440, -682253984);
        test(1761782481, -29623636);
        test(294884591, -260591824);
        test(915815222, -540558717);
        test(475057980, -929423709);
        test(1901555045, -1610500841);
        test(940190183, -1028961320);
        test(724647371, -1979832179);
        test(480488186, -1271521202);
        test(1280366745, -473952152);
        test(1686981616, -1354105345);
        test(987379458, -1592026581);
        test(422181595, -1323902293);
        test(216447603, -1909139019);
        test(341823850, -753627596);
        test(430493706, -158199397);
        test(1010241279, -1520786580);
        test(565988777, -454488845);
        test(-730000987, 982327992);
        test(-507451622, 1193492652);
        test(-1323396458, 1703953272);
        test(-1077027575, 1969489083);
        test(-1069288404, 362253635);
        test(-25478462, 539160085);
        test(-1877142196, 888360747);
        test(-209413826, 64059571);
        test(-1926065980, 1618947807);
        test(-1809590268, 1732561643);
        test(-1696248687, 921695605);
        test(-977748075, 1381331203);
        test(-1390399765, 235042420);
        test(-1563563180, 84770996);
        test(-754354156, 1665575191);
        test(-1176093542, 1503747116);
        test(-221256322, 196238889);
        test(-958610363, 1768387039);
        test(-2031276466, 1341630227);
        test(-1584186565, 1149001445);
        test(-406142524, 1530734210);
        test(-780018985, 1385078563);
        test(-118915219, 1636438093);
        test(-101970210, 290646257);
        test(-332963273, 1982164674);
        test(-856877187, 1635797768);
        test(-1013534994, 129665452);
        test(-507595536, 631140669);
        test(-1365077535, 1086983158);
        test(-2101595784, 1760936178);
        test(-1099942275, 2101595784);
        test(-454218747, 1099942275);
        test(-1908460552, 1857891238);
        test(-1651216043, 1179527090);
        test(-777497236, 104210246);
        test(-1280481267, 777497236);
        test(-1075632386, 1223707147);
        test(-1593728683, 223034551);
        test(-2099806008, 1063024979);
        test(-78553413, 2099806008);
        test(-80446536, 591888235);
        test(-1565988777, 266548744);
        ////////////////////////////////3. Предметная область
        test(10, 1);
        test(9, 2);
        test(8, 3);
        test(7, 4);
        test(6, 5);
        test(5, 6);
        test(4, 7);
        test(3, 8);
        test(2, 9);
        test(1, 10);
        test(-10, 1);
        test(-9, 2);
        test(-8, 3);
        test(-7, 4);
        test(-6, 5);
        test(-5, 6);
        test(-4, 7);
        test(-3, 8);
        test(-2, 9);
        test(-1, 10);
        test(10, -1);
        test(9, -2);
        test(8, -3);
        test(7, -4);
        test(6, -5);
        test(5, -6);
        test(4, -7);
        test(3, -8);
        test(2, -9);
        test(1, -10);
        test(-10,-1);
        test(-9, -2);
        test(-8, -3);
        test(-7, -4);
        test(-6, -5);
        test(-5, -6);
        test(-4, -7);
        test(-3, -8);
        test(-2, -9);
        test(-1, -10);
        ////////////////////////////////4. Реализация
        test(max, max);
        test(min, min);
        ////////////////////////////////5. Случайные значения
        test(55, 37);
        test(1540, 0);
        test(-26530000, -4002);
        test(25, 380000000);
        test(12545556, 1000000000);
        test(-265300000, -99999);
        test(500000005, 300000007);
        test(10000540, 0);
        test(-20006530, -505200);
        test(265300000, 99999999);
        test(55456789, 332145687);
        test(1540, 21548445);
        test(-26530000, -15155576);
        test(22255115, 380000000);
        test(12545556, 999999845);
        test(-265300000, -15668845);
        test(2046336252, 300000007);
        test(10000540, -254569885);
        test(-20006530, -5052200);
        test(265300000, -999999999);
        test(500, 500);
        test(2046236252, 310120007);
        test(10200540, -25423885);
        test(-20011530, -5052200);
        test(262312000, -999932199);
        test(4322, 42331);
        test(20423232, 30000427);
        test(1032540, -2523285);
        test(-2206530, -51420);
        test(26231200, -9423199);
        test(42312, 423124);
        test(251252, 30023507);
        test(1120540, -25123585);
        test(-2001250, -512300);
        test(26535000, -991239);
        test(5120, 2340);
        test(1236252, 3231007);
        test(1234140, -25432885);
        test(-263530, -5633200);
        test(2123400, -1459999);
        test(51234, 61231);
        test(212356252, 235100007);
        test(112300540, -2359885);
        test(-233006530, -23552200);
        test(12355632, -5512342);
        test(6122, 2352);
        ////////////////////////////////6. Другие особые значения
        test(0, 0);
        test(0, 20);
        test(100, 0);
        test(-30, 0);
        test(0, -145);
        test(3453, 0);
        test(0, 34234);
        test(234, 0);
        test(-2344, 0);
        test(0, -12342);
        test(0, 2342);
        test(234234, 20);
        test(100, -234444);
        test(-33231, 0);
        test(0, -132333);
        test(-12333, 0);
        test(22221, 0);
        test(-123231, 0);
        test(-3323234, 0);
        test(0, -223213);
        test(0,-1576677447);
        test(41535566,0);
        test(-2073131192,0);
        test(0,697683551);
        test(1074938597,0);
        test(0,-904435649);
        test(156029958,0);
        test(0,-878556399);
        test(564889286,0);
        test(0,-1846597513);
        test(0,934164059);
        test(-1223415006,0);
        test(-242122782,0);
        test(0,1468906274);
        test(1738567487,0);
        test(0,-768783820);
        test(-574977584,0);
        test(-1919919100,0);
        test(0,1527273239);
        test(1757662595,0);
    }

    public void test(int a, int b){
        assertEquals(Arrays.toString(new int[]{b, a}), Arrays.toString(Swap.swap(a, b)));
    }
}