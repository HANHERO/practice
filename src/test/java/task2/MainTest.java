package task2;


import org.junit.Test;


import static org.junit.Assert.assertEquals;
import static task2.Main.d;

public class MainTest {
    private final int min = 1;
    private final int max = Integer.MAX_VALUE;
    private void a(String e, String a){
        assertEquals(e, a);
    }
    ///////////////////////////////////////1 Граничные значения области определения.
    @Test public void minMax() {
        a("1 этаж, 1 подъезд.", d(min, min, min));
        a("1 этаж, 1 подъезд.", d(min, min, max));
        a("1 этаж, 1 подъезд.", d(min, max, min));
        a("1 этаж, 1 подъезд.", d(min, max, max));
        a("1 этаж, 2147483647 подъезд.", d(max, min, min));
        a("2147483647 этаж, 1 подъезд.", d(max, min, max));
        a("1 этаж, 1 подъезд.", d(max, max, min));
        a("1 этаж, 1 подъезд.", d(max, max, max));

        d(min+1, min, min);
        d(min, min+1, min);
        d(min, min, min+1);

        d(min+1, min, max);
        d(min, min+1, max);
        d(min, min, max-1);

        d(min+1, max, min);
        d(min, max-1, min);
        d(min, max, min+1);

        d(min+1, max, max);
        d(min, max-1, max);
        d(min, max, max-1);

        d(max-1, min, min);
        d(max, min+1, min);
        d(max, min, min+1);

        d(max-1, min, max);
        d(max, min+1, max);
        d(max, min, max-1);

        d(max-1, max, min);
        d(max, max-1, min);
        d(max, max, min+1);

        d(max-1, max, max);
        d(max, max-1, max);
        d(max, max, max-1);



        d(min+1, min+1, min);
        d(min, min+1, min+1);
        d(min+1, min, min+1);

        d(min+1, min+1, max);
        d(min, min+1, max-1);
        d(min+1, min, max-1);

        d(min+1, max-1, min);
        d(min, max-1, min+1);
        d(min+1, max, min+1);

        d(min+1, max-1, max);
        d(min, max-1, max-1);
        d(min+1, max, max-1);

        d(max-1, min+1, min);
        d(max, min+1, min+1);
        d(max-1, min, min+1);

        d(max-1, min+1, max);
        d(max, min+1, max-1);
        d(max-1, min, max-1);

        d(max-1, max-1, min);
        d(max, max-1, min+1);
        d(max-1, max, min+1);

        d(max-1, max-1, max);
        d(max, max-1, max-1);
        d(max-1, max, max-1);
    }
    ////////////////////////////////////////2 Классы эквивалентности
    ////////////////////////////////////////2.1 Границы классов эквивалентности
    @Test public void borders() {
        a("2 этаж, 1 подъезд.", d(11, 10, 10));
        a("2 этаж, 1 подъезд.", d(20, 10, 10));
        a("1 этаж, 2 подъезд.", d(101, 10, 10));
        a("10 этаж, 2 подъезд.", d(200, 10, 10));
    }
    ////////////////////////////////////////2.2 Впритык слева и справа от грацницы
    @Test public void leftRightSteps() {
        a("1 этаж, 1 подъезд.", d(10, 10, 10));
        a("2 этаж, 1 подъезд.", d(12, 10, 10));
        a("2 этаж, 1 подъезд.", d(19, 10, 10));
        a("3 этаж, 1 подъезд.", d(21, 10, 10));
        a("10 этаж, 1 подъезд.", d(100, 10, 10));
        a("1 этаж, 2 подъезд.", d(102, 10, 10));
        a("10 этаж, 2 подъезд.", d(199, 10, 10));
        a("1 этаж, 3 подъезд.", d(201, 10, 10));
    }
    ////////////////////////////////////////2.3 Внутри класса эквивалентности
    @Test public void internal() {
        a("2 этаж, 1 подъезд.", d(13, 10, 10));
        a("2 этаж, 1 подъезд.", d(14, 10, 10));
        a("2 этаж, 1 подъезд.", d(15, 10, 10));
        a("2 этаж, 1 подъезд.", d(16, 10, 10));
        a("2 этаж, 1 подъезд.", d(17, 10, 10));
        a("2 этаж, 1 подъезд.", d(18, 10, 10));
        a("2 этаж, 2 подъезд.", d(111, 10, 10));
        a("3 этаж, 2 подъезд.", d(125, 10, 10));
        a("4 этаж, 2 подъезд.", d(135, 10, 10));
        a("5 этаж, 2 подъезд.", d(146, 10, 10));
        a("6 этаж, 2 подъезд.", d(157, 10, 10));
        a("7 этаж, 2 подъезд.", d(168, 10, 10));
        a("8 этаж, 2 подъезд.", d(178, 10, 10));
        a("9 этаж, 2 подъезд.", d(188, 10, 10));
    }
    ////////////////////////////////////////3. Предметная область
    @Test public void subjectArea() {
        a("3 этаж, 1 подъезд.", d(15, 6, 9));
        a("2 этаж, 4 подъезд.", d(113, 4, 9));
        a("1 этаж, 3 подъезд.", d(44, 4, 5));
        a("5 этаж, 2 подъезд.", d(56, 4, 9));
        a("9 этаж, 9 подъезд.", d(322, 4, 9));
        a("9 этаж, 2 подъезд.", d(108, 6, 9));
    }

    ////////////////////////////////////////4. Реализация

    ///////////////////////////////////////5. Случайные значения
    @Test public void random() {
        a("2 этаж, 1 подъезд.", d(12, 6, 5));
        a("1 этаж, 2 подъезд.", d(40, 4, 9));
        a("3 этаж, 1 подъезд.", d(15, 5, 10));
        a("2 этаж, 4 подъезд.", d(24, 3, 2));
        a("4 этаж, 1 подъезд.", d(16, 4, 4));
    }
    ///////////////////////////////////////6. Другие особые значения
}