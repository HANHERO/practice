package task4;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.math.BigInteger;

import static org.junit.Assert.assertEquals;

public class MainTest {

    private final ByteArrayOutputStream output = new ByteArrayOutputStream();

    @Before
    public void setUpStreams() {
        System.setOut(new PrintStream(output));
    }

    @After
    public void cleanUpStreams() {
        System.setOut(null);
    }
    /////////////////////////////////////////////////Максимальное/минимальное значения
    @Test(expected = NegativeArraySizeException.class)
    public void minIntValueArgument() {
        Main.fib(-2147483648);
    }

    @Test(expected = NegativeArraySizeException.class)
    public void maxIntValueArgument() {
        Main.fib(2147483647);
    }


    /////////////////////////////////////////////////Уникальное значение
    @Test
    public void uniqueValue() {
        assertEquals(new BigInteger("0"), Main.fib(0));
    }


    /////////////////////////////////////////////////Предметная область
    @Test
    public void subjectArea1() {
        assertEquals(new BigInteger("1"), Main.fib(1));
    }

    @Test
    public void subjectArea2() {
        assertEquals(new BigInteger("1"), Main.fib(2));
    }

    @Test
    public void subjectArea3() {
        assertEquals(new BigInteger("2"), Main.fib(3));
    }

    @Test
    public void subjectArea4() {
        assertEquals(new BigInteger("3"), Main.fib(4));
    }

    @Test
    public void subjectArea5() {
        assertEquals(new BigInteger("5"), Main.fib(5));
    }

    @Test
    public void subjectArea6() {
        assertEquals(new BigInteger("8"), Main.fib(6));
    }

    @Test
    public void subjectArea7() {
        assertEquals(new BigInteger("13"), Main.fib(7));
    }

    @Test
    public void subjectArea8() {
        assertEquals(new BigInteger("21"), Main.fib(8));
    }

    @Test
    public void subjectArea9() {
        assertEquals(new BigInteger("34"), Main.fib(9));
    }

    @Test
    public void subjectArea10() {
        assertEquals(new BigInteger("55"), Main.fib(10));
    }

    @Test
    public void subjectArea11() {
        assertEquals(new BigInteger("1"), Main.fib(-1));
        assertEquals("Вы ввели отрицателый номер числа Фибоначчи, вот его значение: ", output.toString());
    }

    @Test
    public void subjectArea22() {
        assertEquals(new BigInteger("-1"), Main.fib(-2));
        assertEquals("Вы ввели отрицателый номер числа Фибоначчи, вот его значение: ", output.toString());
    }

    @Test
    public void subjectArea33() {
        assertEquals(new BigInteger("2"), Main.fib(-3));
        assertEquals("Вы ввели отрицателый номер числа Фибоначчи, вот его значение: ", output.toString());
    }

    @Test
    public void subjectArea44() {
        assertEquals(new BigInteger("-3"), Main.fib(-4));
        assertEquals("Вы ввели отрицателый номер числа Фибоначчи, вот его значение: ", output.toString());
    }

    @Test
    public void subjectArea55() {
        assertEquals(new BigInteger("5"), Main.fib(-5));
        assertEquals("Вы ввели отрицателый номер числа Фибоначчи, вот его значение: ", output.toString());
    }

    @Test
    public void subjectArea66() {
        assertEquals(new BigInteger("-8"), Main.fib(-6));
        assertEquals("Вы ввели отрицателый номер числа Фибоначчи, вот его значение: ", output.toString());
    }

    @Test
    public void subjectArea77() {
        assertEquals(new BigInteger("13"), Main.fib(-7));
        assertEquals("Вы ввели отрицателый номер числа Фибоначчи, вот его значение: ", output.toString());
    }

    @Test
    public void subjectArea88() {
        assertEquals(new BigInteger("-21"), Main.fib(-8));
        assertEquals("Вы ввели отрицателый номер числа Фибоначчи, вот его значение: ", output.toString());
    }

    @Test
    public void subjectArea99() {
        assertEquals(new BigInteger("34"), Main.fib(-9));
        assertEquals("Вы ввели отрицателый номер числа Фибоначчи, вот его значение: ", output.toString());
    }

    @Test
    public void subjectArea1010() {
        assertEquals(new BigInteger("-55"), Main.fib(-10));
        assertEquals("Вы ввели отрицателый номер числа Фибоначчи, вот его значение: ", output.toString());
    }

    ///////////////////////////////////////////////////////Реализация
    @Test
    public void lowerLimitOfProgramPerformance(){
        assertEquals(new BigInteger("-336447648764317832666216120051075433103021484606800639065647" +
                "699746800814421666623681555955136337340255820653326808361593" +
                "737347904838652682630408924630564318873545443695598274916066" +
                "020998841839338646527313000888302692356736131351175792974378" +
                "544137521305205043477016022647583189065278908551543661595829" +
                "872796829875106312005754287834532155151038708182989697916131" +
                "278562650331954871402142875326981879620469360978799003509623" +
                "022910263681314931952756302278376284415403605844025721143349" +
                "611800230912082870460889239623288354615057765832712525460935" +
                "911282039252853934346209042452489294039017062338889910858410" +
                "651831733604374707379085526317643257339937128719375877468974" +
                "799263058370657428301616374089691784263786242128352581128205" +
                "163702980893320999057079200643674262023897831114700540749984" +
                "592503606335609338838319233867830561364353518921332797329081" +
                "337326426526339897639227234078829281779535805709936910491754" +
                "708089318410561463223382174656373212482263830921032977016480" +
                "547262438423748624114530938122065649140327510866433945175121" +
                "615265453613331113140424368548051067658434935238369596534280" +
                "717687753283482343455573667197313927462736291082106792807847" +
                "180353291311767789246590899386354593278945237776744061922403" +
                "376386740040213303432974969020283281459334188268176838930720" +
                "036347956231171031012919531697946076327375892535307725523759" +
                "437884345040677155557790564504430166401194625809722167297586" +
                "150269684431469520346149322911059706762432685159928347098912" +
                "847067408620085871350162603120719031720860940812983215810772" +
                "820763531866246112782455372085323653057759564300725177443150" +
                "515396009051686032203491632226408852488524331580515348496224" +
                "348482993809050704834824493274537326245677558790891871908036" +
                "620580095947431500524025327097469953187707243768259074199396" +
                "322659841474981936092852239450397071654431564213281576889080" +
                "587831834049174345562705202235648464951961124602683139709750" +
                "693826487066132645076650746115126775227486215986425307112984" +
                "411826226610571635150692600298617049454250474913781151541399" +
                "415506712562711971332527636319396069028956502882686083622410" +
                "82050562430701794976171121233066073310059947366875"), Main.fib(-10000));
        assertEquals("Вы ввели отрицателый номер числа Фибоначчи, вот его значение: ", output.toString());
    }

    @Test
    public void upperLimitOfProgramPerformance(){
        assertEquals(new BigInteger("33644764876431783266621612005107543310302148460680063906564769" +
                "97468008144216666236815559551363373402558206533268083615937373479048386526826304089246" +
                "30564318873545443695598274916066020998841839338646527313000888302692356736131351175792" +
                "97437854413752130520504347701602264758318906527890855154366159582987279682987510631200" +
                "57542878345321551510387081829896979161312785626503319548714021428753269818796204693609" +
                "78799003509623022910263681314931952756302278376284415403605844025721143349611800230912" +
                "08287046088923962328835461505776583271252546093591128203925285393434620904245248929403" +
                "90170623388899108584106518317336043747073790855263176432573399371287193758774689747992" +
                "63058370657428301616374089691784263786242128352581128205163702980893320999057079200643" +
                "67426202389783111470054074998459250360633560933883831923386783056136435351892133279732" +
                "90813373264265263398976392272340788292817795358057099369104917547080893184105614632233" +
                "82174656373212482263830921032977016480547262438423748624114530938122065649140327510866" +
                "43394517512161526545361333111314042436854805106765843493523836959653428071768775328348" +
                "23434555736671973139274627362910821067928078471803532913117677892465908993863545932789" +
                "45237776744061922403376386740040213303432974969020283281459334188268176838930720036347" +
                "95623117103101291953169794607632737589253530772552375943788434504067715555779056450443" +
                "01664011946258097221672975861502696844314695203461493229110597067624326851599283470989" +
                "12847067408620085871350162603120719031720860940812983215810772820763531866246112782455" +
                "37208532365305775956430072517744315051539600905168603220349163222640885248852433158051" +
                "53484962243484829938090507048348244932745373262456775587908918719080366205800959474315" +
                "00524025327097469953187707243768259074199396322659841474981936092852239450397071654431" +
                "56421328157688908058783183404917434556270520223564846495196112460268313970975069382648" +
                "70661326450766507461151267752274862159864253071129844118262266105716351506926002986170" +
                "49454250474913781151541399415506712562711971332527636319396069028956502882686083622410" +
                "82050562430701794976171121233066073310059947366875"), Main.fib(10000));
    }

    /////////////////////////////////////////////////////5.Случайные значения
    @Test
    public void randomFib1() {
        assertEquals(new BigInteger("4052739537881"), Main.fib(62));
    }

    @Test
    public void randomFib2() {
        assertEquals(new BigInteger("-1304969544928657"), Main.fib(-74));
    }

    @Test
    public void randomFib3() {
        assertEquals(new BigInteger("679891637638612258"), Main.fib(87));
    }

    @Test
    public void randomFib4() {
        assertEquals(new BigInteger("37889062373143906"), Main.fib(81));
    }

    @Test
    public void randomFib5() {
        assertEquals(new BigInteger("1134903170"), Main.fib(45));
    }

    @Test
    public void randomFib6() {
        assertEquals(new BigInteger("9227465"), Main.fib(35));
    }

    @Test
    public void randomFib7() {
        assertEquals(new BigInteger("10946"), Main.fib(-21));
    }

    @Test
    public void randomFib8() {
        assertEquals(new BigInteger("196418"), Main.fib(27));
    }
}