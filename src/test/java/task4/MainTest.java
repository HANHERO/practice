package task4;

import org.junit.Test;

import java.math.BigInteger;

import static org.junit.Assert.assertEquals;
import static task4.NewFib.f;

public class MainTest {
    private final BigInteger founded10K = new BigInteger("33644764876431783266621612005107543310302148460680063906564769974680081" +
            "4421666623681555955136337340255820653326808361593737347904838652682630408924630564318873545443695598274916066020998841839338646527313000" +
            "8883026923567361313511757929743785441375213052050434770160226475831890652789085515436615958298727968298751063120057542878345321551510387" +
            "0818298969791613127856265033195487140214287532698187962046936097879900350962302291026368131493195275630227837628441540360584402572114334" +
            "9611800230912082870460889239623288354615057765832712525460935911282039252853934346209042452489294039017062338889910858410651831733604374" +
            "7073790855263176432573399371287193758774689747992630583706574283016163740896917842637862421283525811282051637029808933209990570792006436" +
            "7426202389783111470054074998459250360633560933883831923386783056136435351892133279732908133732642652633989763922723407882928177953580570" +
            "9936910491754708089318410561463223382174656373212482263830921032977016480547262438423748624114530938122065649140327510866433945175121615" +
            "2654536133311131404243685480510676584349352383695965342807176877532834823434555736671973139274627362910821067928078471803532913117677892" +
            "4659089938635459327894523777674406192240337638674004021330343297496902028328145933418826817683893072003634795623117103101291953169794607" +
            "6327375892535307725523759437884345040677155557790564504430166401194625809722167297586150269684431469520346149322911059706762432685159928" +
            "3470989128470674086200858713501626031207190317208609408129832158107728207635318662461127824553720853236530577595643007251774431505153960" +
            "0905168603220349163222640885248852433158051534849622434848299380905070483482449327453732624567755879089187190803662058009594743150052402" +
            "5327097469953187707243768259074199396322659841474981936092852239450397071654431564213281576889080587831834049174345562705202235648464951" +
            "9611246026831397097506938264870661326450766507461151267752274862159864253071129844118262266105716351506926002986170494542504749137811515" +
            "4139941550671256271197133252763631939606902895650288268608362241082050562430701794976171121233066073310059947366875");
    private final BigInteger founded9999 = new BigInteger("20793608237133498072112648988642836825087036094015903119682945866528501423455686648927" +
            "4560343052265155917573432971901580106247942672509731761338101799027380382317897483462355564831914315919245323944200280678103204087244146" +
            "9346284906266838708330804825092065449334087873322637758084744632487379760373479464825811385863155040408101726038120291994389237094285260" +
            "1647398213554479081823593715429566945149312993664846779090437799284773675379284270660175134664833266377698642012106891355791141872776934" +
            "0808035049567940946482928805660563647181876626689707585373833526774208355741559456585420036347653245410061210124467856891714948032624086" +
            "0269309121160197393822944663604990153196328615969907788042772028923553932967187718291564341907918652511867885682160089752017107049943765" +
            "7067342400871083908811800976259727431820539554256869460815355918458253398234382360435762759823179896116748424269545924633204614137992850" +
            "8143520187384809235815539889908971514694061316956144977837207434613737562186851068568260906963398154909212537145372418669116042505973537" +
            "4782373326817818219850924022695582641601669008474981607284358248861318482990538315018004784435375155420157383310552198099812383325326122" +
            "8689824051777846588461079790807828367132384798451794011076569057522158680378961532160858387223882974380483931929541222100800313580688585" +
            "0025988795664632214278204484925650731065958088374016489964235633861097820456341224678729218456064091743606356182168838125623216644428229" +
            "5253757749271536532113420453068674243545450510326976814437011849490639025493494235890403150987736972243705338316536038859511698024592793" +
            "5225901537634925654872380877183008301074569444002426436414756905094535072804764684492105680024739914490555904391369218696387092918189246" +
            "1571034503870502293006032416114107074539600801709282779518347632167052424858208014238665266338160829214428830954632590804718193292017101" +
            "4782802522138565634020748979631766327887220760779103443170011275355881347888872750382538906682309868335569571813786788298211171079642270" +
            "6778536913192342733364556727928018953989153106047379741280794091639429908796650294603536651238230626");
    private final BigInteger foundedMinus10K = new BigInteger("-33644764876431783266621612005107543310302148460680063906564769974680081" +
            "4421666623681555955136337340255820653326808361593737347904838652682630408924630564318873545443695598274916066020998841839338646527313000" +
            "8883026923567361313511757929743785441375213052050434770160226475831890652789085515436615958298727968298751063120057542878345321551510387" +
            "0818298969791613127856265033195487140214287532698187962046936097879900350962302291026368131493195275630227837628441540360584402572114334" +
            "9611800230912082870460889239623288354615057765832712525460935911282039252853934346209042452489294039017062338889910858410651831733604374" +
            "7073790855263176432573399371287193758774689747992630583706574283016163740896917842637862421283525811282051637029808933209990570792006436" +
            "7426202389783111470054074998459250360633560933883831923386783056136435351892133279732908133732642652633989763922723407882928177953580570" +
            "9936910491754708089318410561463223382174656373212482263830921032977016480547262438423748624114530938122065649140327510866433945175121615" +
            "2654536133311131404243685480510676584349352383695965342807176877532834823434555736671973139274627362910821067928078471803532913117677892" +
            "4659089938635459327894523777674406192240337638674004021330343297496902028328145933418826817683893072003634795623117103101291953169794607" +
            "6327375892535307725523759437884345040677155557790564504430166401194625809722167297586150269684431469520346149322911059706762432685159928" +
            "3470989128470674086200858713501626031207190317208609408129832158107728207635318662461127824553720853236530577595643007251774431505153960" +
            "0905168603220349163222640885248852433158051534849622434848299380905070483482449327453732624567755879089187190803662058009594743150052402" +
            "5327097469953187707243768259074199396322659841474981936092852239450397071654431564213281576889080587831834049174345562705202235648464951" +
            "9611246026831397097506938264870661326450766507461151267752274862159864253071129844118262266105716351506926002986170494542504749137811515" +
            "4139941550671256271197133252763631939606902895650288268608362241082050562430701794976171121233066073310059947366875");
    private final BigInteger foundedMinus9999 = new BigInteger("20793608237133498072112648988642836825087036094015903119682945866528501423455686" +
            "6489274560343052265155917573432971901580106247942672509731761338101799027380382317897483462355564831914315919245323944200280678103204087" +
            "2441469346284906266838708330804825092065449334087873322637758084744632487379760373479464825811385863155040408101726038120291994389237094" +
            "2852601647398213554479081823593715429566945149312993664846779090437799284773675379284270660175134664833266377698642012106891355791141872" +
            "7769340808035049567940946482928805660563647181876626689707585373833526774208355741559456585420036347653245410061210124467856891714948032" +
            "6240860269309121160197393822944663604990153196328615969907788042772028923553932967187718291564341907918652511867885682160089752017107049" +
            "9437657067342400871083908811800976259727431820539554256869460815355918458253398234382360435762759823179896116748424269545924633204614137" +
            "9928508143520187384809235815539889908971514694061316956144977837207434613737562186851068568260906963398154909212537145372418669116042505" +
            "9735374782373326817818219850924022695582641601669008474981607284358248861318482990538315018004784435375155420157383310552198099812383325" +
            "3261228689824051777846588461079790807828367132384798451794011076569057522158680378961532160858387223882974380483931929541222100800313580" +
            "6885850025988795664632214278204484925650731065958088374016489964235633861097820456341224678729218456064091743606356182168838125623216644" +
            "4282295253757749271536532113420453068674243545450510326976814437011849490639025493494235890403150987736972243705338316536038859511698024" +
            "5927935225901537634925654872380877183008301074569444002426436414756905094535072804764684492105680024739914490555904391369218696387092918" +
            "1892461571034503870502293006032416114107074539600801709282779518347632167052424858208014238665266338160829214428830954632590804718193292" +
            "0171014782802522138565634020748979631766327887220760779103443170011275355881347888872750382538906682309868335569571813786788298211171079" +
            "6422706778536913192342733364556727928018953989153106047379741280794091639429908796650294603536651238230626");

    private void a(BigInteger e, BigInteger a){
        assertEquals(e, a);
    }
    /////////////////////////////////////////////////1. Граничные значения области определения.
    @Test public void minMax() {
        assertEquals(BigInteger.class, f(-2000000).getClass());
        assertEquals(BigInteger.class, f(2000000).getClass());
    }
    /////////////////////////////////////////////////2. Классы эквивалентности
    /////////////////////////////////////////////////2.1 Границы классов эквивалентности
    @Test public void classes(){
        a(foundedMinus10K, f(-10000));
        a(new BigInteger("1"), f(-1));

        a(founded10K, f(10000));
        a(new BigInteger("1"), f(1));
    }
    /////////////////////////////////////////////////2.2 Впритык слева и справа от границы
    @Test public void rightLeftSteps(){
        a(foundedMinus9999, f(-9999));
        a(new BigInteger("-1"), f(-2));
        a(new BigInteger("0"), f(0));

        a(founded9999, f(9999));
        a(new BigInteger("1"), f(2));
        a(new BigInteger("0"), f(0));
    }

    /////////////////////////////////////////////////2.3 Внутри класса эквивалентности
    @Test public void internal(){
        a(new BigInteger("0"), f(0));
        a(new BigInteger("89"), f(11));
        a(new BigInteger("89"), f(-11));
        a(new BigInteger("514229"), f(29));
        a(new BigInteger("514229"), f(-29));
        a(new BigInteger("498454011879264"), f(72));
        a(new BigInteger("-498454011879264"), f(-72));
        a(foundedMinus10K, f(-10000));
        a(founded10K, f(10000));
    }
    /////////////////////////////////////////////////3. Предметная область
    @Test public void subjectArea() {
        a(new BigInteger("1"), f(1));
        a(new BigInteger("1"), f(2));
        a(new BigInteger("2"), f(3));
        a(new BigInteger("3"), f(4));
        a(new BigInteger("5"), f(5));
        a(new BigInteger("8"), f(6));
        a(new BigInteger("13"), f(7));
        a(new BigInteger("21"), f(8));
        a(new BigInteger("34"), f(9));
        a(new BigInteger("55"), f(10));
        a(new BigInteger("89"), f(11));
        a(new BigInteger("144"), f(12));
        a(new BigInteger("233"), f(13));
        a(new BigInteger("377"), f(14));
        a(new BigInteger("610"), f(15));
        a(new BigInteger("987"), f(16));
        a(new BigInteger("1597"), f(17));
        a(new BigInteger("2584"), f(18));
        a(new BigInteger("4181"), f(19));
        a(new BigInteger("6765"), f(20));
        a(new BigInteger("1"), f(-1));
        a(new BigInteger("-1"), f(-2));
        a(new BigInteger("2"), f(-3));
        a(new BigInteger("-3"), f(-4));
        a(new BigInteger("5"), f(-5));
        a(new BigInteger("-8"), f(-6));
        a(new BigInteger("13"), f(-7));
        a(new BigInteger("-21"), f(-8));
        a(new BigInteger("34"), f(-9));
        a(new BigInteger("-55"), f(-10));
        a(new BigInteger("89"), f(-11));
        a(new BigInteger("-144"), f(-12));
        a(new BigInteger("233"), f(-13));
        a(new BigInteger("-377"), f(-14));
        a(new BigInteger("610"), f(-15));
        a(new BigInteger("-987"), f(-16));
        a(new BigInteger("1597"), f(-17));
        a(new BigInteger("-2584"), f(-18));
        a(new BigInteger("4181"), f(-19));
        a(new BigInteger("-6765"), f(-20));
    }
    /////////////////////////////////////////////////////4. Реализация

    /////////////////////////////////////////////////////5. Случайные значения
    @Test public void random() {
        a(new BigInteger("4052739537881"), f(62));
        a(new BigInteger("-1304969544928657"), f(-74));
        a(new BigInteger("679891637638612258"), f(87));
        a(new BigInteger("37889062373143906"), f(81));
        a(new BigInteger("1134903170"), f(45));
        a(new BigInteger("9227465"), f(35));
        a(new BigInteger("10946"), f(-21));
        a(new BigInteger("196418"), f(27));
    }
}